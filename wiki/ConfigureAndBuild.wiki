#labels Featured,Phase-Deploy
<wiki:toc max_depth="4" />
= Setting up Linux build environment =
== Hardware ==
To work with Canyonlands you will need the following:
 * Canyonlands development board
 * PC host machine (Ubuntu LTS (10.04) with Ethernet card and serial port (or USB-to-Serial adapter)
 * Serial cable (null-modem)
 * ATX Power supply
 * USB Hub
 * USB Ethernet adapter
 * USB Keyboard & Mouse
 * USB Flash stick
 * Ethernet cross cable or Ethernet Switch/Hub and 2 cables
 * Serial ATA HDD or IDE HDD with PCI/PCIe IDE controller (if you want to work with HDD)
 * PCIe Video adapter (Currently supported are XGI Volari z9s/z9m/z11)
 * VGA or DVI cable
 * Monitor with VGA or DVI support
 
== Software ==
=== Common ===
As Google we recommend to use Ubuntu 10.04+, all essential steps are descripbed [http://source.android.com/source/initializing.html here].

=== NFS root ===
To boot target board with NFS root you will need additional software:
   * TFTP server
   * NFS server
   * DHPC server
   * minicom
{{{
$ sudo apt-get install minicom atftpd uboot-mkimage nfs-kernel-server isc-dhcp-server
}}}

== Configure network ==
=== Ethernet adapter configuration ===
{{{
sudo ifconfig ethX 10.10.10.1 netmask 255.255.255.0 up
}}}
=== DHCP server configuration ===
/etc/dhcp/dhcpd.conf
{{{
INTERFACES="ethX"; #

ddns-update-style none;
default-lease-time 600;
max-lease-time 7200;

subnet 10.10.10.0 netmask 255.255.255.0 {
  range 10.10.10.10 10.10.10.200;
  option routers 10.10.10.1;
  option broadcast-address 10.10.10.255;
  option subnet-mask 255.255.255.0;
}

host canyonlands {
  hardware ethernet 00:00:00:00:00:00; # Your device MAC
  fixed-address 10.10.10.36;
  option host-name "canyonlands";
  option root-path "/svr/nfs/canyonlands-root";
}
}}}
=== TFTP server configuration ===
 /etc/default/atftpd:
{{{
USE_INETD=true
OPTIONS="--tftpd-timeout 300 --retry-timeout 5 --mcast-port 1758 \
--mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose=5 /srv/tftp"
}}}
=== NFS server configuration ===
Adjust host configuration to allow target root filesystem to be exported on host. To do that add the following entry to /etc/exports
{{{
/srv/nfs/canyonlands-root    10.10.10.0/24(rw,no_root_squash,no_all_squash)
}}}

Re-export NFS directories and start NFS server:
{{{
$ sudo /usr/sbin/exportfs -rv
$ sudo /etc/init.d/nfs-kernel-server start
}}}

= Build =
== Linux kernel ==
To build kernel the Android compiler should be added into PATH variable:
{{{
$ cd <ppcdroid-repo-dir>
$ export PATH=$PATH:$PWD/prebuilt/linux-x86/toolchain/powerpc-linux-4.3.1/bin
}}}

The kernel source tree is located in root of Android sources in _kernel_ folder:
{{{
$ make ARCH=powerpc 44x/canyonlands_android_defconfig
$ make ARCH=powerpc CROSS_COMPILE=powerpc-android-linux- -j8 uImage 
$ cd arch/powerpc/boot/dts && dtc -I dts -O dtb -o canyonlands.dtb canyonlands.dts
}}}
uImage can be found in _arch/powerpc/boot_ folder and device tree blob file in _arch/powerpc/boot/dts_ folder.

== Android root filesystem ==

To build file system you need to specify for which board you want to build. 

*Currently only Canyonlands platform is supported*

{{{
$ cd <ppcdroid-repo-dir>
$ source build/envsetup.sh
$ lunch full_canyonlands-eng
$ make -j8
}}}

The number after '-j' is amount of available CPUs on your host system. This can significantly reduce build time.

After build process finished you'll need rootfs for this do following:

{{{ 
$ cd out/target/product/canyonlands
$ mkdir android_rootfs
$ cp -r root/* android_rootfs
$ cp -r system android_rootfs
}}}

{{{
$ sudo ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2
}}}

= Startup process =
== Boot from USB+HDD ==
Linux kernel and the device tree blob file can be loaded from USB stick and Android root filesystem can be located on HDD.
To prepare bootable USB stick and HDD with Android rootfs:
   # Create single VFAT partition on the USB stick and put uImage and device tree blob file on it
   # Create single ext3 partition on the HDD and unpack rootfs tarball on it
   # Insert USB stick into target device and switch it on
   # Get U-Boot command prompt
   # Start USB subsystem in the U-boot:
{{{
# usb start
}}}
   # Clarify USB stick device and partition numbers:
{{{
# usb storage
        Device 0: Vendor: USB 2.0  Rev: 0.00 Prod: USB Flash Drive
                  Type: Removable Hard Disk
                  Capacity: 3856.0 MB = 3.7 GB (7897088 x 512)
        Device 1: Vendor: Generic  Rev: 0.00 Prod: USB Flash Disk
                  Type: Removable Hard Disk
                  Capacity: 3856.0 MB = 3.7 GB (7897088 x 512)
}}}
   # Say USB stick with the uImage and device tree blob is the Device 0:
{{{
# usb part 0
      print_part of 0

      Partition Map for USB device 0  --   Partition Type: DOS

      Partition     Start Sector     Num Sectors     Type
          1                   63         7886529       b 
}}}
   # Load uImage and device tree blob from the USB stick:
{{{
# fatload usb 0:1 0x300000 uImage
# fatload usb 0:1 0x3000000 canyonlands.dtb
}}}
   # Setup bootargs for the USB/IDE boot:
{{{
# setenv bootargs root=/dev/hde1 rw rootwait console=ttyS0,115200 init=/init
}}}
   # Boot the kernel
{{{
# bootm 300000 - 3000000
}}}

== Boot with NFS root ==
   # Copy required filesystem tree:
{{{
$ cd <ppcdroid-repo-dir>/out/target/product/canyonlands
$ sudo cp -r root/* /svr/nfs/canyonlands-root
$ sudo cp -r system /svr/nfs/canyonlands-root
}}}
   # Get U-Boot command prompt
   # Setup bootargs for network boot:
{{{
setenv ethact ppc_4xx_eth1
setenv netdev eth1
setenv console_dev ttyS0
setenv kernel_image uImage-canyonlands
setenv fdt_file canyonlands.dtb
setenv fdt_addr 0x3000000
setenv loadaddr 0x300000
setenv rootfs_path /srv/nfs/canyonlands-root
setenv serverip 10.10.10.1
setenv ipadd 10.10.10.2
setenv netmask 255.255.255.0
setenv gatewayip 10.10.10.1
setenv bootargs \"root=/dev/nfs rw nfsroot=${serverip}:${rootfs_path} init=/init ip=dhcp panic=1 console=${console_dev},${baudrate}\"
setenv bootcmd \"setenv ethact ppc_4xx_eth1;tftp ${kernel_image};tftp ${fdtm_addr} ${fdt_file};bootm ${loadaddr} - ${fdtm_addr}\"
bootm
}}}

* Important note for Donut version*

During start sequence the Android will bring up eth0 interface with ethmonitor service. So the NFS root should be loaded through second interface, otherwise ethmonitor must be disabled.

To do that comment line in init.rc file on target rootfs:
{{{
# service ethmonitor /system/bin/ethmonitor eth0
}}}